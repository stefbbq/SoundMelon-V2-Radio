.main-content.song-view
	
	.header
		.section-wrapper
			.left
				.title.go-back
					%img.back-btn{src: '/assets/back.png'} go back
			.right
				.title editing song
			.clear
	
	.content

		.music-edit-song
		
			- @artist = current_artist
			- no_brand = false
			- in_db = false
			- if Song.where(id: params[:id]).size == 0
				- @song = Song.new(song_title: params[:song_title], song_id: params[:song_id])
				- source_abbr = params[:upload_source] == 'youtube' ? 'yt' : 'sc'
				- duration = to_minutes(params[:duration].to_f)
				- source_tags = params[:source_tags].nil? ? [] : params[:source_tags]
				- upload_source = params[:upload_source]
				/- song_private = params[:song_private]
				- song_id = params[:song_id]
				- song_url = params[:song_url]
				- song_image = params[:song_image]
			- else
				- @song = Song.find(params[:id])

				- in_db = true
				- source_abbr = @song.upload_source == 'youtube' ? 'yt' : 'sc'
				- duration = @song.duration
				- source_tags = @song.source_tags.nil? ? [] : @song.source_tags
				- upload_source = @song.upload_source
				/- song_private = @song.is_private
				- song_id = @song.song_id
				- song_url = @song.song_url
				/- song_title = @song.song_title
				- song_image = @song.song_image
			- no_brand = !(/placeholder/ =~ song_image).nil?
			- song_title = in_db ? @song.song_title : params[:song_title]
			- song_private = params[:song_private] == "true" || @song.is_private
			- state = @song.active ? 'ACTIVE' : 'INACTIVE'
			- on_state_class = @song.active ? 'toggle-select' : ''
			- off_state_class = @song.active ? '' : 'toggle-select'
			
			.song-basic.section-wrapper
				.song-image{style: "background: url(#{song_image}) center / #{no_brand ? 'contain' : 'cover'} no-repeat"}
					- if !no_brand
						.brand-logo{class: 'source-' + source_abbr}
				.song-information
					%span.song-title= song_title
					%span.duration= duration
				.clear
					
			- if song_private
				.private
					We can't stream private songs! Would you like to make this song public on #{upload_source}?
					= link_to "Make Public!", make_public_path(song_id: song_id, upload_source: upload_source, artist_id: @artist.id), remote: true, class: 'make-public', onclick: "$(this).siblings('.spinner').show()"
					.spinner.white-spinner

			.song-form.section-wrapper{class: song_private ? "hidden" : ""}
				
				= form_for(@song, remote: true) do |f|
				
					.song-state
						
						.toggle-switch
							.toggle-state.on{class: on_state_class}
								.switch-box on
							.toggle-state.off{class: off_state_class}
								.switch-box off
							= f.hidden_field(:active, value: @song.active, class: 'active-check')

						- if in_db && @song.active
							= render 'songs/song_share_link', locals: {id: @song.id}

							
						%span.state{class: state.downcase}= state
						
					.source-tags= f.text_field :source_tags, value: source_tags.join(', ')
					/= link_to 'Refresh tags', get_source_tags_path(song_id: song_id, artist_id: current_artist.id, source: upload_source), remote: true
					
					= f.hidden_field :artist_id, value: @artist.id
					= f.hidden_field :song_id, value: song_id
					= f.hidden_field :upload_source, value: upload_source
					= f.hidden_field :song_url, value: song_url
					= f.hidden_field :duration, value: duration
					= f.hidden_field :song_title, value: song_title
					= f.hidden_field :song_image, value: song_image
		
:javascript

	$('.go-back').click(function() {
		$('.modal#music-admin .main-content:not(.song-view)').show();
		$('.modal#music-admin .main-content.song-view').remove();
	});
	
	$('.song-state .toggle-switch').click(function() {
		var state = $(this).children('.active-check').val();
		var newState = (state === 'false') ? 'true' : 'false';
		console.log(state);
		$(this).children('.toggle-state').toggleClass('toggle-select');
		$(this).children('.active-check').val(newState);
		console.log($(this).children('.active-check').val());

		var stateName = (newState === 'true') ? 'ACTIVE' : 'INACTIVE';
		var stateSpan = $(this).closest('.song-state').find('.state');
		stateSpan.toggleClass('active inactive');
		stateSpan.text(stateName);
		
		$(this).closest('form').submit();
	});
	
	$('.song-form .source-tags input').tagsInput({
		'removeWithBackspace': true,
		'defaultText': 'add more tags...',
		'height': '152px',
		'width': 'auto',
		'onAddTag': function() {
			console.log($(this).closest('form'));
			$(this).closest('form').submit();
		},
		'onRemoveTag': function() {
			console.log($(this).closest('form'));
			$(this).closest('form').submit();
		}
	});
